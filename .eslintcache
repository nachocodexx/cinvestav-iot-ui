[{"/home/nacho/Programming/Nodejs/React/iot-health-app/src/index.tsx":"1","/home/nacho/Programming/Nodejs/React/iot-health-app/src/reportWebVitals.ts":"2","/home/nacho/Programming/Nodejs/React/iot-health-app/src/App.tsx":"3","/home/nacho/Programming/Nodejs/React/iot-health-app/src/components/LoginForm/LoginForm.tsx":"4","/home/nacho/Programming/Nodejs/React/iot-health-app/src/components/NoMatch/NoMatch.tsx":"5","/home/nacho/Programming/Nodejs/React/iot-health-app/src/pages/Dashboard.page.tsx":"6","/home/nacho/Programming/Nodejs/React/iot-health-app/src/pages/Index.page.tsx":"7"},{"size":501,"mtime":1606878691291,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1606877125677,"results":"10","hashOfConfig":"9"},{"size":958,"mtime":1607795184229,"results":"11","hashOfConfig":"9"},{"size":1062,"mtime":1607762274660,"results":"12","hashOfConfig":"9"},{"size":508,"mtime":1607763756043,"results":"13","hashOfConfig":"9"},{"size":6518,"mtime":1607918222214,"results":"14","hashOfConfig":"9"},{"size":465,"mtime":1607795197452,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1u89rpa",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/nacho/Programming/Nodejs/React/iot-health-app/src/index.tsx",[],["33","34"],"/home/nacho/Programming/Nodejs/React/iot-health-app/src/reportWebVitals.ts",[],"/home/nacho/Programming/Nodejs/React/iot-health-app/src/App.tsx",[],"/home/nacho/Programming/Nodejs/React/iot-health-app/src/components/LoginForm/LoginForm.tsx",[],["35","36"],"/home/nacho/Programming/Nodejs/React/iot-health-app/src/components/NoMatch/NoMatch.tsx",[],"/home/nacho/Programming/Nodejs/React/iot-health-app/src/pages/Dashboard.page.tsx",["37"],"import RC, { useEffect, useRef, useState } from 'react'\nimport Chart from \"react-apexcharts\";\nimport ApexChart from 'apexcharts'\nimport { QRSComplexResult } from '../interfaces/QRSComplexResult';\n\n\n\nexport const DashboardPage: RC.FunctionComponent<any> = (props: any) => {\n\n    const ws = useRef(new WebSocket(\"ws://localhost:8080/api/ws/7dd77f33-a86e-43dc-9e3d-264a6e119f0e/1\"))\n    const [rawMeasurements, updateRawMeasurements] = useState([] as number[])\n    // const [filteredMeasurements, updateFilteredMeasurements] = useState([] as number[])\n    // const [differentiatedMeasurements, updatedifferentiatedMeasurements] = useState([] as number[])\n\n    const chartConfig = {\n        options: {\n            chart: {\n                id: \"realtime\",\n                animations: {\n                    enabled: true,\n                    easing: 'linear',\n                    dynamicAnimation: {\n                        speed: 1000\n                    }\n                },\n                toolbar: {\n                    show: false\n                },\n                zoom: {\n                    enabled: false\n                }\n            },\n            stroke: {\n                curve: 'smooth',\n            },\n            colors: [\"#FF3051\"],\n            title: {\n                text: 'Raw ECG Measurements',\n                align: 'center'\n            },\n            markers: {\n                size: 0\n            },\n            xaxis: {\n                type: \"numeric\",\n                range: 10\n            },\n            yaxis: {\n                max: 3.5\n            },\n\n        },\n        series: [\n            {\n                // data: Array(10).fill(0).map(x => Math.floor(Math.random() * 100))\n                data: [0]\n            },\n        ]\n    }\n\n\n    // const chartConfig2 = {\n    //     options: {\n    //         chart: {\n    //             id: \"realtime2\",\n    //             animations: {\n    //                 enabled: true,\n    //                 easing: 'linear',\n    //                 dynamicAnimation: {\n    //                     speed: 1000\n    //                 }\n    //             },\n    //             toolbar: {\n    //                 show: false\n    //             },\n    //             zoom: {\n    //                 enabled: false\n    //             }\n    //         },\n    //         stroke: {\n    //             curve: 'smooth'\n    //         },\n    //         title: {\n    //             text: 'Filtered ECG Measurements',\n    //             align: 'center'\n    //         },\n    //         markers: {\n    //             size: 0\n    //         },\n    //         xaxis: {\n    //             type: \"numeric\",\n    //             range: 10\n    //         },\n    //         yaxis: {\n    //             max: 3.5\n    //         },\n\n    //     },\n    //     series: [\n    //         {\n    //             // data: Array(10).fill(0).map(x => Math.floor(Math.random() * 100))\n    //             data: [0]\n    //         },\n    //     ]\n    // }\n\n\n\n    // const chartConfig3 = {\n    //     options: {\n    //         chart: {\n    //             id: \"realtime3\",\n    //             animations: {\n    //                 enabled: true,\n    //                 easing: 'linear',\n    //                 dynamicAnimation: {\n    //                     speed: 1000\n    //                 }\n    //             },\n    //             toolbar: {\n    //                 show: false\n    //             },\n    //             zoom: {\n    //                 enabled: false\n    //             }\n    //         },\n    //         stroke: {\n    //             curve: 'smooth'\n    //         },\n    //         title: {\n    //             text: 'Differentiated ECG Measurements',\n    //             align: 'center'\n    //         },\n    //         markers: {\n    //             size: 0\n    //         },\n    //         xaxis: {\n    //             type: \"numeric\",\n    //             range: 10\n    //         },\n    //         yaxis: {\n    //             max: 3.5\n    //         },\n\n    //     },\n    //     series: [\n    //         {\n    //             data: [0]\n    //         },\n    //     ]\n    // }\n\n\n    useEffect(() => {\n        console.log(ws.current);\n        ws.current.onopen = () => console.log(\"OPEN\");\n        ws.current.onclose = () => console.log(\"CLOSED\");\n\n        return () => {\n            ws.current.close()\n        }\n\n    }, [])\n\n    // useEffect(() => {\n    //     const interval = window.setInterval(() => {\n    //         // ApexChart.exec(\"realtime\", \"updateSeries\", [{ data: Array(10).fill(0).map(x => Math.floor(Math.random() * 100)) }])\n    //         const dataX = Number((Math.random() * 10).toFixed(4))\n    //         updateRawMeasurements([...rawMeasurements, dataX])\n    //         ApexChart.exec(\"realtime\", \"updateSeries\", [{ data: rawMeasurements }])\n    //         console.log(\"Real-time updating...\", dataX);\n    //         console.log(rawMeasurements);\n\n    //     }, 2000)\n    //     return () => {\n    //         clearInterval(interval)\n    //     }\n    // }, [updateRawMeasurements, rawMeasurements])\n\n    useEffect(() => {\n        if (!ws.current) return;\n        ws.current.onmessage = message => {\n            const qrsComplexResult = JSON.parse(message.data) as unknown as QRSComplexResult\n            updateRawMeasurements([...rawMeasurements, Number(qrsComplexResult.measurement.toFixed(4))])\n            // updateFilteredMeasurements([...filteredMeasurements, Number(qrsComplexResult.filtered_ecg.toFixed(4))])\n            // updateFilteredMeasurements([...differentiatedMeasurements, Number(qrsComplexResult.differentiated_ecg.toFixed(4))])\n\n\n            ApexChart.exec(\"realtime\", \"updateSeries\", [{ data: rawMeasurements }])\n            // ApexChart.exec(\"realtime2\", \"updateSeries\", [{ data: filteredMeasurements }])\n            // ApexChart.exec(\"realtime3\", \"updateSeries\", [{ data: differentiatedMeasurements }])\n            // console.log(rawMeasurements);\n        }\n    }, [updateRawMeasurements, rawMeasurements])\n\n\n\n\n    return <div style={{ height: 500 }}>\n        <Chart\n            options={chartConfig.options}\n            series={chartConfig.series}\n            type=\"line\"\n            width=\"1500\"\n        />\n\n        {/* <Chart\n            options={chartConfig2.options}\n            series={chartConfig2.series}\n            type=\"line\"\n            width=\"600\"\n        />\n\n        <Chart\n            options={chartConfig3.options}\n            series={chartConfig3.series}\n            type=\"line\"\n            width=\"600\"\n        /> */}\n\n    </div>\n}","/home/nacho/Programming/Nodejs/React/iot-health-app/src/pages/Index.page.tsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":160,"column":16,"nodeType":"46","endLine":160,"endColumn":23},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],["47"],["48"],"react-hooks/exhaustive-deps","The ref value 'ws.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ws.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","no-global-assign","no-unsafe-negation"]